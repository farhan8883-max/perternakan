const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;  
const cors = require('cors');
require('dotenv').config();
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
app.use(cors());
const SECRET_KEY = process.env.SECRET_KEY || 'rahasia_saya';

// app.js atau file utama server Anda



// const mysql = require('mysql');

const mysql = require('mysql');

const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'db_peternak'

});

connection.connect((err) => {
  if (err) {
    console.error('Gagal terhubung ke MySQL:', err);
    return;
  }
  console.log('Berhasil terhubung ke MySQL!');
});

connection.query('SELECT * FROM user', (err, results) => {
  if (err) throw err;
  console.log(results);
});
// const connection = mysql.createConnection({
//   host:

app.use(express.json());

app.get('/user', (req, res) => {
  connection.query('SELECT * FROM user', (err, results) => {
    if (err) {
      return res.status(500).json({ error: 'Gagal mengambil data pengguna' });
    }
    res.json(results);
  });
});

app.use(cors());
app.use(express.json());
// Contoh endpoint GET
app.get('/api/hello', (req, res) => {
  res.json({ message: 'Halo dari mantap!' });
});

app.get('/', (req, res) => {
  res.send('Welcome to my web the User API!');
});

// Contoh endpoint POST
app.post('/api/data', (req, res) => {
  const data = req.body;
  res.status(201).json({ received: data });
});

app.listen(PORT, () => {
  console.log(`Server berjalan di http://localhost:${PORT}`);
});

app.get('/api/hello', (req, res) => {
  console.log('Endpoint /api/hello diakses');
  res.json({ message: 'Halo dari REST API Node.js!' });
});

app.use((req, res, next) => {
  console.log(`${req.method} ${req.url}`);
  next();
});

app.post('/user', (req, res) => {
  const { username, password, email, hp, akses } = req.body;

  // Validasi input
  if (!username || !password || !email || !hp || !akses) {
    return res.status(400).json({ error: 'Semua field wajib diisi' });
  }

  // Enkripsi password
  bcrypt.hash(password, 10, (err, hashedPassword) => {
    if (err) {
      console.error('Kesalahan saat mengenkripsi password:', err);
      return res.status(500).json({ error: 'Terjadi kesalahan pada server' });
    }

    const query = 'INSERT INTO user (username, password, email, hp, akses) VALUES (?, ?, ?, ?, ?)';
    connection.query(query, [username, hashedPassword, email, hp, akses], (err, result) => {
      if (err) {
        console.error('Gagal menyimpan data pengguna:', err);
        return res.status(500).json({ error: 'Gagal menyimpan data pengguna' });
      }

      res.status(201).json({
        message: 'Pengguna berhasil ditambahkan',
        userId: result.insertId,
      });
    });
  });
});


app.delete('/user/:id', (req, res) => {
  const userId = req.params.id;

  const query = 'DELETE FROM user WHERE id = ?';
  connection.query(query, [userId], (err, result) => {
    if (err) {
      console.error('Gagal menghapus pengguna:', err);
      return res.status(500).json({ error: 'Gagal menghapus pengguna' });
    }

    if (result.affectedRows === 0) {
      return res.status(404).json({ message: 'Pengguna tidak ditemukan' });
    }

    res.status(200).json({ message: 'Pengguna berhasil dihapus' });
  });
});

app.put('/user/:id', (req, res) => {
  const userId = req.params.id;
  const { username, password, email, hp, akses } = req.body;

  if (!username || !password || !email || !hp || !akses) {
    return res.status(400).json({ error: 'Username, password, dan email wajib diisi' });
  }

  let query = 'UPDATE user SET username = ?, password = ?, email = ? , hp = ? , akses = ?';
  const params = [username, password, email, hp, akses];

  if (password) {
    const hashedPassword = bcrypt.hashSync(password, 10);
    query += ', password = ?';
    params.push(hashedPassword);
  }

  query += ' WHERE id = ?';
  params.push(userId);

  connection.query(query, params, (err, result) => {
    if (err) {
      console.error('Gagal memperbarui data pengguna:', err);
      return res.status(500).json({ error: 'Gagal memperbarui data pengguna' });
    }

    if (result.affectedRows === 0) {
      return res.status(404).json({ message: 'Pengguna tidak ditemukan' });
    }

    res.status(200).json({ message: 'Data pengguna berhasil diperbarui' });
  });
});


// http://localhost:3000/api/hello
// get token jwt random jwt

